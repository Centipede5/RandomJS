/*
    (c) 2018 tevador <tevador@gmail.com>

    This file is part of Tevador.RandomJS.

    Tevador.RandomJS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Tevador.RandomJS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Tevador.RandomJS.  If not, see<http://www.gnu.org/licenses/>.
*/

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Linq;
using System.Net;
using Tevador.RandomJS.Statements;

namespace Tevador.RandomJS
{
    class Program : Block, IProgram
    {
        private Dictionary<string, Global> _globalNames = new Dictionary<string, Global>();
        private List<Global> _globals = new List<Global>();

        public Program()
            : base(null)
        {

        }

        internal List<Variable> PrintOrder
        {
            get;
            set;
        }

        public override void Require(Global gl)
        {
            if (!_globalNames.ContainsKey(gl.Name))
            {
                gl = gl.Clone();
                _globalNames.Add(gl.Name, gl);
                if (gl.References != null)
                {
                    Require(gl.References);
                }
                _globals.Add(gl);
            }
        }

        protected override IEnumerable<Statement> OrderedStatements()
        {
            foreach(var gl in _globals)
            {
                yield return gl;
            }
            foreach(var st in Statements)
            {
                yield return st;
            }
        }

        internal void SetGlobalVariable<T>(string name, T value)
        {
            Global g;
            if (value != null && _globalNames.TryGetValue(name, out g))
            {
                GlobalVariable glVar = g as GlobalVariable;
                if (glVar != null)
                {
                    glVar.Initializer = new Expressions.Literal(value.ToString());
                }
            }
        }

        public override void WriteTo(System.IO.TextWriter w)
        {
            w.WriteLine("/* This program was generated by Tevador.RandomJS */");
            w.WriteLine("/* Seed: {0} */", BinaryUtils.ByteArrayToString(Seed));
            w.WriteLine("/* Print order: {0} */", string.Join(", ", PrintOrder));
            w.WriteLine("'use strict';");
            base.WriteTo(w);
        }

        internal byte[] Seed
        {
            get; set;
        }

        static void Main(string[] args)
        {
            byte[] seed;
            if (args.Length > 0)
            {
                string hexSeed = args[0];
                if (hexSeed.Length != 64 || hexSeed.Any(c => !"0123456789abcdef".Contains(c)))
                {
                    Console.WriteLine("Invalid seed value (expected 64 hex characters)");
                    return;
                }
                seed = BinaryUtils.StringToByteArray(hexSeed);
            }
            else
            {
                seed = BinaryUtils.GenerateSeed(Environment.TickCount);
            }
            try
            {
                var random = new Xoshiro256Plus();
                var factory = new ProgramFactory(ProgramOptions.FromXml(), random);
                var p = factory.GenProgram(seed);
                Console.OutputEncoding = Encoding.ASCII;
                p.WriteTo(Console.Out);
                Console.WriteLine($"// {random.Counter} random numbers used");
            }
            catch(Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
}
